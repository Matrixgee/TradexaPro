import { useEffect, useRef, useState } from 'react';
import { useDispatch, useSelector } from "react-redux";
import RootState from "../../Function/Rootstate";
import { CiMenuKebab } from "react-icons/ci";
import axios from 'axios';
import { setAllUsers } from '../../Function/Slice';
import toast from 'react-hot-toast';
import { Spin, Modal } from 'antd';

const Users = () => {
    const users = useSelector((state: RootState) => state.mySlice.allAdminUsers || {});
    const userToken = useSelector((state: RootState) => state.mySlice.token);

    const userdaTa = Object.values(users);
    const dispatch = useDispatch();
    const [menuIndices, setMenuIndices] = useState<number[]>([]); // State to track menu indices for each user
    const [verifyLoading, setVerifyLoading] = useState<boolean>(false); // Loading state for verify action
    const [deleteLoading, setDeleteLoading] = useState<boolean>(false); // Loading state for delete action
    const [verifyModalVisible, setVerifyModalVisible] = useState<boolean>(false);
    const [deleteModalVisible, setDeleteModalVisible] = useState<boolean>(false);
    const [selectedUserId, setSelectedUserId] = useState<string>("");

    const handleShowMenu = (index: number) => {
        setMenuIndices(prevIndices => [...prevIndices, index]); // Add the index of the menu to show
    }

    const getAllUsers = async () => {
        const url = 'https://exp-pro.onrender.com/api/user/getallusers';
        const token = userToken;
        const headers = {
            Authorization: `Bearer ${token}`,
        };
        try {
            const response = await axios.get(url, { headers });
            dispatch(setAllUsers(response.data.data));
        } catch (error) {
            console.log(error);
        }
    }

    useEffect(() => {
        getAllUsers();
    }, [])

    const menuRef = useRef<HTMLDivElement>(null)

    useEffect(() => {
        const handleClickOut = (e: MouseEvent) => {
            if (menuRef.current && !menuRef.current.contains(e.target as Node)) {
                setMenuIndices([]); // Reset menu indices when clicking outside
            }
        }
        document.addEventListener('mousedown', handleClickOut)

        return () => {
            document.removeEventListener('mousedown', handleClickOut);
        };
    }, [])

    const token = userToken;
    const headers = {
        Authorization: `Bearer ${token}`,
    };

    const HandleVerifyUser = async (_id: string) => {
        const toastloadingId = toast.loading('Please wait....')
        try {
            setVerifyLoading(true);
            const VerifyUrl = `https://exp-pro.onrender.com/api/admin/verifyUser/${_id}`;
            const data = {}
            const response = await axios.put(VerifyUrl, data, { headers });
            dispatch(setAllUsers(response.data.data));
            setVerifyModalVisible(true);
        } catch (error) {
            console.log(error);
        } finally {
            setVerifyLoading(false);
            setVerifyModalVisible(false)
            toast.dismiss(toastloadingId);
        }
    };

    const HandleDeleteUser = async (_id: string) => {
        const toastloadingId = toast.loading('Please wait....')
        try {
            setDeleteLoading(true);
            const VerifyUrl = `https://exp-pro.onrender.com/api/admin/deleteOneUser/${_id}`;
            const response = await axios.delete(VerifyUrl, { headers });
            dispatch(setAllUsers(response.data.data));
            setDeleteModalVisible(true);
        } catch (error) {
            console.log(error);
        } finally {
            setDeleteLoading(false);
            setDeleteModalVisible(false)
            toast.dismiss(toastloadingId);
        }
    }

    return (
        <>
            <div className="w-full h-screen flex flex-col gap-2 overflow-y-auto">
                <div className="w-max h-10 flex items-center gap-4 justify-between bg-gray-300">
                    <p className="w-32 h-full flex justify-center items-center">Name</p>
                    <p className="w-32 h-full flex justify-center items-center">UserName</p>
                    <p className="w-32 h-full flex justify-center items-center">Status</p>
                    <p className="w-32 h-full flex justify-center items-center">Account balance</p>
                    <p className="w-32 h-full flex justify-center items-center">Verify</p>
                    <p className="w-32 h-full flex justify-center items-center">Date Registered</p>
                    <p className="w-32 h-full flex justify-center items-center">Action</p>
                </div>
                <div className="w-max h-max flex flex-col gap-2">
                    {userdaTa.map((items, index) => (
                        <div
                            className="w-max h-16 flex items-center gap-4 justify-between bg-sky-100 shadow"
                            key={index}
                        >
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {items.fullName}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {items.userName}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {items.status}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {items.accountBalance}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {`${items.isVerified}`}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm">
                                {new Date(items?.createdAt).toLocaleDateString()}
                            </p>
                            <p className="w-32 h-full flex justify-center items-center text-sm relative" ref={menuRef}>
                                <CiMenuKebab
                                    className="w-6 h-6 cursor-pointer"
                                    onClick={() => handleShowMenu(index)} // Pass the index to determine which menu to show
                                />
                                {menuIndices.includes(index) && ( // Conditionally render the menu based on the selected index
                                    <div className="absolute top-12 right-[10px] z-10 w-32 h-max flex flex-col bg-orange-100 gap-2 p-2">
                                        <div
                                            className="w-full h-8 flex items-center justify-center bg-white cursor-pointer"
                                        >
                                            Credit/Debit
                                        </div>
                                        <div
                                            className="w-full h-8 flex items-center justify-center bg-white cursor-pointer"
                                        >
                                            Suspend User
                                        </div>
                                        <div
                                            className="w-full h-8 flex items-center justify-center bg-white cursor-pointer"
                                            onClick={() => HandleVerifyUser(items._id)}
                                        >
                                            Verify User
                                            {verifyLoading && <Spin/>}
                                        </div>
                                        <div
                                            className="w-full h-8 flex items-center justify-center bg-white cursor-pointer"
                                            onClick={() => {
                                                setSelectedUserId(items._id);
                                                setDeleteModalVisible(true);
                                            }}
                                        >
                                            Delete User
                                            {deleteLoading && <Spin/>}
                                        </div>
                                    </div>
                                )}
                            </p>
                        </div>
                    ))}
                </div>
                <Modal
                    title="User Verify Successful"
                    open={verifyModalVisible}
                    onOk={() => setVerifyModalVisible(false)}
                    onCancel={() => setVerifyModalVisible(false)}
                >
                    User verification was successful!
                </Modal>
                <Modal
                    title="Delete User"
                    open={deleteModalVisible}
                    onOk={() => {
                        HandleDeleteUser(selectedUserId);
                        setDeleteModalVisible(false);
                    }}
                    onCancel={() => setDeleteModalVisible(false)}
                >
                    Are you sure you want to delete this user?
                </Modal>
            </div>
        </>
    );
}

export default Users;
